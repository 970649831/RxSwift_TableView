//
//  SignupViewModel.swift
//  TaskElephant
//
//  Created by apple on 17/4/12.
//  Copyright © 2017年 xiangguohe. All rights reserved.
//

import UIKit
import RxSwift
import RxCocoa
class SignupViewModel: NSObject {

    var validatedUserName : Driver<ValidationResult>!
    var validatePassWord : Driver<ValidationResult>!
    var validatedPasswordRepeated : Driver<ValidationResult>!

    //登录按钮的交互
    var signupEnabled : Driver<Bool>!
    
    //登录过
    var signedIn: Driver<Bool>!
    
    //登录指示器
    var signingIn : Driver<Bool>!
    
       
    init(
        input:( //传参
            userName:Driver<String>,
            passWord:Driver<String>,
            repeatPassWord:Driver<String>,
            loginTaps:Driver<Void>
        ),
        dependency:(//服务,接口
            API:GitHubAPI,
            validationService:GitHubValidationService,
            wireFrame :Wireframe
        )
        ) {
           super.init()
           //缓存接口网址
           let API = dependency.API
           let validationService = dependency.validationService
           let wireframe = dependency.wireFrame
        
           //用户名
           validatedUserName = input.userName
                     .flatMapLatest({ (userName) in
                        return validationService.validateUsername(userName: userName)
                               .asDriver(onErrorJustReturn: .failed(message: "连接服务器错误"))//Error contacting server
                     })
           //密码
           validatePassWord = input.passWord
                      .map({ (passWord) in
                        return validationService.validationPassWord(passWord: passWord)
                      })
           //验证密码
           validatedPasswordRepeated = Driver.combineLatest(input.passWord, input.repeatPassWord, resultSelector: validationService.validationRepeatedPassword)
        
        //登录指示器
        let sigingInActivityIndicator = ActivityIndicator()
        self.signingIn = sigingInActivityIndicator.asDriver()
        
        let userNameAndPassWord = Driver.combineLatest(input.userName, input.passWord) { ($0, $1) }
        signedIn = input.loginTaps.withLatestFrom(userNameAndPassWord)
               .flatMapLatest({ (userName,passWord) in
                   return API.signup(userName: userName, passWord: passWord)
                        .trackActivity(sigingInActivityIndicator)
                        .asDriver(onErrorJustReturn: false)
               })
               .flatMapLatest({ (loggedIn) -> Driver<Bool> in
                   let message  = loggedIn ? "登录成功" : "登录失败"
                return wireframe.promptFor(message, cancelAction: "OK", actions: [])
                    // propagate original value
                    .map { _ in
                        loggedIn
                    }
                    .asDriver(onErrorJustReturn: false)
               })
        
        //缓存登录按钮交互
        signupEnabled = Driver.combineLatest(validatedUserName, validatePassWord, validatedPasswordRepeated, signingIn){ username, password, repeatPassword, signingIn in
                username.isValid &&
                password.isValid &&
                repeatPassword.isValid &&
                !signingIn
            }.distinctUntilChanged()
    }
    
    
}








